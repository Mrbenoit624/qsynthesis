from triton import AST_NODE
from typing import TypeVar, Union, Tuple, List, Generator, Dict, Optional
from enum import IntEnum

# Utils types
BitSize = int
"""Integer representing a size in bits"""

ByteSize = int
"""Integer representing a size in bytes"""


# Triton Types
AstNode = TypeVar("AstNode")
"""AstNode represent an AstNode object as returned by Triton"""

AstType = IntEnum("AstType", {k: v for k, v in AST_NODE.__dict__.items() if isinstance(v, int)})
"""Enum of all AstNode possible types as defined by the AST_NODE object of Triton"""

Register = TypeVar("Register")
""""Register object as returned by Triton"""

SymbolicExpression = TypeVar("SymbolicExpression")
"""SymbolicExpression object as used by Triton"""

SymbolicVariable = TypeVar("SymbolicVariable")
"""SymbolicVariable object as generated by Triton"""


# TritonAst & Grammar Types
Expr = AstNode
"""Alias for AstNode, to abstract to Triton type"""

SymVarMap = Dict[str, SymbolicVariable]
"""Dictionnary of symbolic variables names to theirs Triton object instance"""


# Synthesis types
Hash = Union[bytes, int, Tuple[int]]
"""Hash abstract type used to performed lookup in tables. Given the HashType of the
table a Hash value might be hashed before being used to perform the lookup."""

Char = str
"""String of size one. Used to represent normalized variables names"""

Input = Dict[str, int]
"""An Input is a valuation of all inputs variables of an expression"""

Output = int
"""Value resulting of evaluating an Input on a given expression"""

IOPair = Tuple[Input, Output]
"""Represent a given input valuation and the resulting output integer"""

IOVector = List[IOPair]
"""List of input-outputs pairs"""
